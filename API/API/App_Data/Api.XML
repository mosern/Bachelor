<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Api</name>
    </assembly>
    <members>
        <member name="T:Api.AutoMapConfig">
            <summary>
            Configuration of automapper, used to convert between db models to viewmodels
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:Api.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,Api.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:Api.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:Api.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:Api.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:Api.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:Api.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,Api.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,Api.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:Api.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:Api.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:Api.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(Api.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:Api.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:Api.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Api.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:Api.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:Api.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:Api.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleKey.#ctor(Api.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Api.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Api.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,Api.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Api.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:Api.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:Api.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:Api.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:Api.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:Api.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Api.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of Neighbours
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "neighbours". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all neighbours in the database</returns>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific neighbour
            </summary>
            <param name="id"> id for the neighbour you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed neighbour object</returns>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Post(Api.Models.Api.NeighbourViewModel)">
            <summary>
            Creates new neighbour
            </summary>
            <param name="neighbour">neighbourViewModel with info about the neighbour to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Put(Api.Models.Api.NeighbourViewModel,System.Int32)">
            <summary>
            Full update of a neighbour
            </summary>
            <param name="neighbour">All information about the neighbour to be updated</param>
            <param name="id">Id of the neighbour to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Patch(Api.Models.Api.NeighbourViewModel,System.Int32)">
            <summary>
            Partial update of a neighbour
            </summary>
            <param name="neighbour">Information about the neighbour to be updated</param>
            <param name="id">Id of the neighbour to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.NeighbourController.Delete(System.Int32)">
            <summary>
            Removes an neighbour
            </summary>
            <param name="id">Id of the neighbour to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of PathPoints
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "PathPoints". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all pathPoints in the database</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific pathPoint
            </summary>
            <param name="id"> id for the pathPoint you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed pathPoint object</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Post(Api.Models.Api.PathPointViewModel)">
            <summary>
            Creates new pathPoint
            </summary>
            <param name="pathPoint">pathPointViewModel with info about the pathPoint to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Put(Api.Models.Api.PathPointViewModel,System.Int32)">
            <summary>
            Full update of a pathPoint
            </summary>
            <param name="pathPoint">All information about the pathPoint to be updated</param>
            <param name="id">Id of the pathPoint to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Patch(Api.Models.Api.PathPointViewModel,System.Int32)">
            <summary>
            Partial update of a pathPoint
            </summary>
            <param name="pathPoint">Information about the pathPoint to be updated</param>
            <param name="id">Id of the pathPoint to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PathPointController.Delete(System.Int32)">
            <summary>
            Removes an pathPoint
            </summary>
            <param name="id">Id of the pathPoint to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of People
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "people". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all people in the database</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific people
            </summary>
            <param name="id"> id for the neighbour you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed people object</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Post(Api.Models.Api.PeopleViewModel)">
            <summary>
            Creates new people
            </summary>
            <param name="people">peopleViewModel with info about the people to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Put(Api.Models.Api.PeopleViewModel,System.Int32)">
            <summary>
            Full update of a people
            </summary>
            <param name="people">All information about the people to be updated</param>
            <param name="id">Id of the people to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Patch(Api.Models.Api.PeopleViewModel,System.Int32)">
            <summary>
            Partial update of a people
            </summary>
            <param name="people">Information about the people to be updated</param>
            <param name="id">Id of the people to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.PeopleController.Delete(System.Int32)">
            <summary>
            Removes an people
            </summary>
            <param name="id">Id of the people to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="T:Api.Controllers.TypeController">
            <summary>
            Controller that handels crud for Types
            </summary>
        </member>
        <member name="M:Api.Controllers.TypeController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of location
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "Types". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all types in the database</returns>
        </member>
        <member name="M:Api.Controllers.TypeController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific type
            </summary>
            <param name="id"> id for the type you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed type object</returns>
        </member>
        <member name="M:Api.Controllers.TypeController.Post(Api.Models.Api.TypeViewModel)">
            <summary>
            Creates new type
            </summary>
            <param name="type">TypeViewModel with info about the type to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.TypeController.Put(Api.Models.Api.TypeViewModel,System.Int32)">
            <summary>
            Full update of a type
            </summary>
            <param name="type">All information about the type to be updated</param>
            <param name="id">Id of the type to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.TypeController.Patch(Api.Models.Api.TypeViewModel,System.Int32)">
            <summary>
            Partial update of a type
            </summary>
            <param name="type">Information about the type to be updated</param>
            <param name="id">Id of the type to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.TypeController.Delete(System.Int32)">
            <summary>
            Removes an type
            </summary>
            <param name="id">Id of the type to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="T:Api.Controllers.AccesspointController">
            <summary>
            Controller that handels crud for Accesspoints
            </summary>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of accesspoints
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "accesspoints". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all accesspoints in the database</returns>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific accesspoint
            </summary>
            <param name="id"> id for the accesspoint you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed accesspoint object</returns>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Post(Api.Models.Api.AccesspointViewModel)">
            <summary>
            Creates new accesspont
            </summary>
            <param name="acc">AccesspointViewModel with info about the accesspoint to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Put(Api.Models.Api.AccesspointViewModel,System.Int32)">
            <summary>
            Full update of a accesspoint
            </summary>
            <param name="acc">All information about the accesspoint to be updated</param>
            <param name="id">Id of the accesspoint to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Patch(Api.Models.Api.AccesspointViewModel,System.Int32)">
            <summary>
            Partial update of a accesspoint
            </summary>
            <param name="acc">Information about the accesspoint to be updated</param>
            <param name="id">Id of the accesspoint to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.AccesspointController.Delete(System.Int32)">
            <summary>
            Removes an accesspoint
            </summary>
            <param name="id">Id of the accespoint to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="T:Api.Controllers.CoordinateController">
            <summary>
            Controller that handels crud for Coordinates
            </summary>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of coordinates
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "coordiantes". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all coordinatess in the database</returns>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific coordinates
            </summary>
            <param name="id"> id for the accesspoint you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed coordinates object</returns>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Post(Api.Models.Api.CoordinateViewModel)">
            <summary>
            Creates new coordinates
            </summary>
            <param name="cor">CoordinateViewModel with info about the coordnate to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Put(Api.Models.Api.CoordinateViewModel,System.Int32)">
            <summary>
            Full update of a coordinate
            </summary>
            <param name="cor">All information about the coordinate to be updated</param>
            <param name="id">Id of the coordinate to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Patch(Api.Models.Api.CoordinateViewModel,System.Int32)">
            <summary>
            Partial update of a coordinate
            </summary>
            <param name="cor">Information about the coodinate to be updated</param>
            <param name="id">Id of the coordiante to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.CoordinateController.Delete(System.Int32)">
            <summary>
            Removes an coordinate
            </summary>
            <param name="id">Id of the coordinate to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Gets a list of locations or search for location and/or people by string
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "locations". Name of object if asObject is true</param>
            <param name="search">Optional. search for location and/or people with a string</param>
            <returns>200 ok with processed list of all locations in the database</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific location
            </summary>
            <param name="id"> id for the location you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed location object</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Post(Api.Models.Api.LocationViewModel)">
            <summary>
            Creates new location
            </summary>
            <param name="location">locationViewModel with info about the location to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Put(Api.Models.Api.LocationViewModel,System.Int32)">
            <summary>
            Full update of a location
            </summary>
            <param name="loc">All information about the location to be updated</param>
            <param name="id">Id of the location to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Patch(Api.Models.Api.LocationViewModel,System.Int32)">
            <summary>
            Partial update of a location
            </summary>
            <param name="loc">Information about the location to be updated</param>
            <param name="id">Id of the location to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.LocationController.Delete(System.Int32)">
            <summary>
            Removes an location
            </summary>
            <param name="id">Id of the location to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="T:Api.Controllers.UserController">
            <summary>
            Controller that handels crud for Users
            </summary>
        </member>
        <member name="M:Api.Controllers.UserController.Get(System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of users
            </summary>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "users". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all users in the database</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Get(System.Int32,System.String)">
            <summary>
            Gets a spesific user
            </summary>
            <param name="id"> id for the accesspoint you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed user object</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Get(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a list of locations, the spesified user has visited
            </summary>
            /// <param name="id"> id for the user</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">Optional, sorts accending by id if not set. The fields to sort by, use "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">Optional. The page you want</param>
            <param name="pageSize">Optional, standard value is 5. The size you want your pages to be</param>
            <param name="asObject">Optional, standard value is true. Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Optional, standard value is "userLocations". Name of object if asObject is true</param>
            <returns>200 ok with processed list of all locations in the database, that the spesified user has visited. Hits field in these location objects is spesific to the user</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Get(System.Int32,System.Int32,System.String)">
            <summary>
            Gets a spesific location, the spesified user has visited
            </summary>
            <param name="id"> id for the user</param>
            /// <param name="locId"> id for the location you want to get</param>
            <param name="fields">Optional. The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>200 ok with processed location object</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Post(UserDB.User)">
            <summary>
            Creates new user
            </summary>
            <param name="user">UserViewModel with info about the user to create</param>
            <returns>201 created with the new object</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Put(UserDB.User,System.Int32)">
            <summary>
            Full update of a user
            </summary>
            <param name="user">All information about the user to be updated</param>
            <param name="id">Id of the user to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Patch(UserDB.User,System.Int32)">
            <summary>
            Partial update of a user
            </summary>
            <param name="user">Information about the user to be updated</param>
            <param name="id">Id of the user to be updated</param>
            <returns>200 ok</returns>
        </member>
        <member name="M:Api.Controllers.UserController.Delete(System.Int32)">
            <summary>
            Removes an user
            </summary>
            <param name="id">Id of the user to remove</param>
            <returns>200 ok</returns>
        </member>
        <member name="T:Api.Factories.ShapeFactory`1">
            <summary>
            Generic class that shapes an object, base on the spesified fields. Has methodes for both individual objects and lists of objects
            </summary>
            <typeparam name="X">a ViewModel</typeparam>
        </member>
        <member name="T:Api.Classes.ILocationRepository`1">
            <summary>
            Repository interface
            
            Written by: Andreas Mosvoll
            </summary>
            <typeparam name="X"></typeparam>
        </member>
        <member name="T:Api.Classes.IQueryableExtensions">
            <summary>
            Written by Kevin Dockx as a part of the course "Building and Securing a RESTful API for Multiple Clients in ASP.NET" on pluralsight.
            https://app.pluralsight.com/library/courses/building-securing-restful-api-aspdotnet/description
            </summary>
        </member>
        <member name="T:Api.Classes.JsonHelper">
            <summary>
            Helper class for making objects. 
            Needed because Android differentiates JsonArray and JsonObject.
            Therefor having the returned data as JsonObjects only, makes it easier for the Android develpers.
            </summary>
        </member>
        <member name="T:Api.Classes.LocationRepository`1">
            <summary>
            I was inspired by the following site and so the code is similar and some places copied.
            http://www.codeproject.com/Articles/814768/CRUD-Operations-Using-the-Generic-Repository-Patte
            
            Written by: Andreas Mosvoll
            </summary>
            <typeparam name="X"></typeparam>
        </member>
        <member name="T:Api.Classes.Search">
            <summary>
            Handles search fuctionality
            </summary>
        </member>
        <member name="M:Api.Classes.Search.Location(System.String)">
            <summary>
            Takes a search stirng and returns the result
            </summary>
            <param name="searchString"></param>
            <returns>SearchViewModel, contains the result in form of a list LocationViewModel and a list of PeopleViewModel</returns>
        </member>
        <member name="M:Api.Classes.Search.getTypeLocation(System.String)">
            <summary>
            Checks what the search string contains
            </summary>
            <param name="searchString"></param>
            <returns>int based on type of input. 1 for Loc number, 2 for LocName, 0 for unknown</returns>
        </member>
        <member name="M:Api.Classes.Search.getTypePeople(System.String)">
            <summary>
            Checks what the search string contains
            </summary>
            <param name="searchString"></param>
            <returns>int based on type of input. 1 for people name, 0 for unknown</returns>
        </member>
        <member name="M:Api.Classes.Search.isLocNr(System.String)">
            <summary>
            Checks if search string is a locNr
            </summary>
            <param name="checkString"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Api.Classes.Search.isLocName(System.String)">
            <summary>
            Checks if search string is a locName
            </summary>
            <param name="checkString"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Api.Classes.Search.isPeoName(System.String)">
            <summary>
            Checks if search string is a people name
            </summary>
            <param name="checkString"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Api.Classes.Search.peopleByName(System.String)">
            <summary>
            gets people objects where name contains search string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Classes.Search.locationByLocNr(System.String)">
            <summary>
            gets location objects where locNr contains search string
            </summary>
            <param name="locNr"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Classes.Search.locationByName(System.String)">
            <summary>
            gets location objects where name contains search string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Api.Classes.Search.locationById(System.Int32)">
            <summary>
            gets location objects where id equals search string
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Api.Classes.PaginationHeader">
            <summary>
            PaginationHeader object and static metode for creating it.
            </summary>
        </member>
        <member name="T:Api.Helpers.ControllerHelper">
            <summary>
            Basic controller functionality implementet as generic methodes. This makes implementing a new controller easy.
            
            Written by: Andreas Mosvoll
            </summary>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.get``1(System.Object,System.String)">
            <summary>
            Converts object to X where X is of type BaseViewModel and optionally applies field filtering.
            </summary>
            <typeparam name="X">Type of ViewModel, used for converting object to a viewmodel</typeparam>
            <param name="obj">The object to process</param>
            <param name="fields">The fields to include in returned object. Returns all fields if no field is specified</param>
            <returns>Processed object</returns>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.get``1(System.Linq.IQueryable{System.Object},System.Web.HttpContext,System.Net.Http.HttpRequestMessage,System.String,System.Boolean,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Converts collection of object to X where X is of type BaseViewModel and optionally applies field filtering, sorting and paging with support for custom pagesize.
            </summary>
            <typeparam name="X">Type of ViewModel, used for converting object to a viewmodel</typeparam>
            <param name="obj">The object to process</param>
            <param name="context">HttpContext used to add "x-pagination" header</param>
            <param name="request">Used by PaginationHeader class to initiate UrlHelper that is used to generate links for next and previous page</param>
            <param name="routeName">Used in pagination header</param>
            <param name="asObject">Spesify if you want a collection or a object with the collection as a property</param>
            <param name="objPropName">Name of object if asObject is true</param>
            <param name="fields">The fields to include in returned object. Returns all fields if no field is specified</param>
            <param name="sort">The fields to sort by, user "," to serparate fields. Use "-" in fornt of field name to sort decending. Sorts accesnding by id as default</param>
            <param name="page">The page you want</param>
            <param name="pageSize">The size you want your pages to be</param>
            <returns>Processed object</returns>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.post``2(``1)">
            <summary>
            Creates new object in database from viewmodel
            </summary>
            <typeparam name="X">Type of database model, must inherit BaseModel</typeparam>
            <typeparam name="Y">Type of ViewModel, must inherit BaseViewModel</typeparam>
            <param name="viewModel">The view model containing data to create new database object from</param>
            <returns>ViewModel created from the new database object</returns>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.Put``1(System.Object)">
            <summary>
            Full update of object in database from viewmodel
            </summary>
            <typeparam name="X">Type of database model, must inherit BaseModel</typeparam>
            <param name="viewModel">The view model containing data to be set to existing database object</param>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.Patch``1(System.Object)">
            <summary>
            Partial update of object in database from viewmodel
            </summary>
            <typeparam name="X">Type of database model, must inherit BaseModel</typeparam>
            <param name="viewModel">The view model containing data to be set to existing database object</param>
        </member>
        <member name="M:Api.Helpers.ControllerHelper.Delete``1(System.Int32)">
            <summary>
            Removes a object from the database
            </summary>
            <typeparam name="X"></typeparam>
            <param name="id"></param>
        </member>
    </members>
</doc>
